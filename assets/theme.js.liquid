function checkIsFreeGiftEligible(itemData){
  var free_matched_products = 0;
  var dataUpdated  = false;
  var hasGiftInCart  = false;
  var hasGiftInCartIndex  = -1;
  if(all_free_products.length > 0 && all_free_variant_id != 0)
  {
    $.each(itemData.items, function (index, item) {
    	
        	if(all_free_variant_id == item.id)
            {
              $.each(item.properties, function(key, value) {
				if(key=="Offer")
                {
                  	hasGiftInCart  = true;
                  	hasGiftInCartIndex = index+1;
                  	if(item.quantity > 1)
                  	{
                  	  $.ajax({
						url: '/cart/change.js',
						dataType: 'json',
						type: 'post',
						data: {
							quantity: 1,
      						line: hasGiftInCartIndex
						}
					  });
					  dataUpdated  = true;
                  	}
                }
              });
            	
            }
    	
    });
    $.each(itemData.items, function (index, item) {
    	$.each(all_free_products, function (index, free_product) {
        	if(free_product == item.product_id)
            {
            	free_matched_products += item.quantity;
            }
    	});    
    });
    
  
  if(hasGiftInCart == false && all_free_products_minimum <= free_matched_products)
  {
  			$.ajax({
				url: '/cart/add.js',
				dataType: 'json',
				type: 'post',
              async: false,
				data: {
					quantity: 1,
      				id: all_free_variant_id,
      				properties: {
        				'Offer': all_free_product_offer_name
      				}
			}
			});
			dataUpdated  = true;
  }
  else if(hasGiftInCart && (all_free_products_minimum > free_matched_products) && hasGiftInCartIndex > -1 )
  {
  			$.ajax({
				url: '/cart/change.js',
				dataType: 'json',
				type: 'post',
              async: false,
				data: {
					quantity: 0,
      				line: hasGiftInCartIndex
                }
			});
			dataUpdated  = true;
  }
    }
  
  return dataUpdated;
	
}

function checkIsFreeGiftAmountEligible(itemData){
  var dataUpdated  = false;
  
  var ActualPrice = itemData.items_subtotal_price;
  	$.each(itemData.items, function (index, item) {
		$.each(item.properties, function(key, value) {
			if(key=="Gift-Offer")
			{
				ActualPrice -= item.final_line_price;
			}
		});
	});
      
      
  
  
  if(freeAmountGifts.length>0)
  {
	  for(var i=0;i<freeAmountGifts.length;i++)
	  {
		  var hasGiftInCart  = false;
		  var hasGiftInCartIndex  = -1;
			$.each(itemData.items, function (index, item) {
				if(freeAmountGifts[i].variantId == item.id)
				{
					$.each(item.properties, function(key, value) {
						if(key=="Gift-Offer")
						{
							hasGiftInCart  = true;
							hasGiftInCartIndex = item.variant_id;
							if(item.quantity > 1)
							{
							$.ajax({
								url: '/cart/change.js',
								dataType: 'json',
								type: 'post',
								data: {
									quantity: 1,
									id: hasGiftInCartIndex
								}
							});
							dataUpdated  = true;
							}
						}
					});
				}
			});
         	if(
				(hasGiftInCart && (!( freeAmountGifts[i].minAmount <= ActualPrice && freeAmountGifts[i].maxAmount >= ActualPrice )) && hasGiftInCartIndex > -1 )
				||
				(hasGiftInCart && freeAmountGifts[i].available == false && hasGiftInCartIndex > -1 )
			)
			{
				$.ajax({
					url: '/cart/change.js',
					dataType: 'json',
					type: 'post',
					async: false,
					data: {
						quantity: 0,
						id: hasGiftInCartIndex
					}
				});
				dataUpdated  = true;
			}
			else if(hasGiftInCart == false && freeAmountGifts[i].available && freeAmountGifts[i].minAmount <= ActualPrice && freeAmountGifts[i].maxAmount >= ActualPrice)
			{
				$.ajax({
					url: '/cart/add.js',
					dataType: 'json',
					type: 'post',
					async: false,
					data: {
						quantity: 1,
						id: freeAmountGifts[i].variantId,
						properties: {
							'Gift-Offer': freeAmountGifts[i].name
						}
				}
				});
				dataUpdated  = true;
			}
        	
	  }
    
    
    
    
    $.each(itemData.items, function (index, item) {
	
	$.each(item.properties, function(key, value) {
		if(key=="Gift-Offer")
		{
			var NotValidItem = true;
			for(var i=0;i<freeAmountGifts.length;i++)
			{
				if(freeAmountGifts[i].variantId == item.id)
				{
					NotValidItem = false;
					break;
				}
			}
			if(NotValidItem){
				$.ajax({
					url: '/cart/change.js',
					dataType: 'json',
					type: 'post',
					async: false,
					data: {
						quantity: 0,
						id: item.id
					}
				});
				dataUpdated  = true;
			}
			
		}
	});
	
});
	  
  }
  
  return dataUpdated;
	
}
function checkFreeItemValid(data){
	var dataUpdated  = false;
  	var giftOfferAddedForThis = [];
	$.each(data.items, function(i, item){
		var giftQty = item.quantity;
		var giftId = item.id;
      	var giftLine =i+1;
		var itemFound = true;
		var itemFoundValid = true;
      	if(giftOfferAddedForThis.indexOf(giftId)>-1)
        {
			$.ajax({
				url: '/cart/change.js',
				dataType: 'json',
				type: 'post',
				data: {
				quantity: 0,
				line: (i+1)
			}
			});
			dataUpdated  = true;
		}
		else
		{
		
			$.each(item.properties, function(key, value) {
				if(key=="Offer" && value.startsWith("FREE With "))
				{
					itemFound = false;
					value = value.replace("FREE With ", ""); 
					$.each(data.items, function(i, item){
						if(item.product_title == value)
						{
							itemFound = true;
							if(giftQty == 1)
							{
								giftOfferAddedForThis.push(giftId); 
								itemFoundValid = true;
							}
							else
							{
								$.ajax({
									url: '/cart/change.js',
									dataType: 'json',
									type: 'post',
									data: {
									quantity: 1,
									line: giftLine
								}
								});
								dataUpdated  = true;
								itemFoundValid = true;
								giftOfferAddedForThis.push(giftId); 
							}
						}
					});
					if(itemFound == false)
					{
						$.ajax({
							url: '/cart/change.js',
							dataType: 'json',
							type: 'post',
							data: {
							quantity: 0,
							line: giftLine
						}
						});
						itemFound = true;
						dataUpdated  = true;
					}
				}
			});
		
		}
	});
	return dataUpdated;
}

window.slate = window.slate || {};
window.theme = window.theme || {};

/*================ Slate ================*/
/**
 * A11y Helpers
 * -----------------------------------------------------------------------------
 * A collection of useful functions that help make your theme more accessible
 * to users with visual impairments.
 *
 *
 * @namespace a11y
 */

slate.a11y = {

  /**
   * For use when focus shifts to a container rather than a link
   * eg for In-page links, after scroll, focus shifts to content area so that
   * next `tab` is where user expects if focusing a link, just $link.focus();
   *
   * @param {JQuery} $element - The element to be acted upon
   */
  pageLinkFocus: function($element) {
    var focusClass = 'js-focus-hidden';

    $element.first()
      .attr('tabIndex', '-1')
      .focus()
      .addClass(focusClass)
      .one('blur', callback);

    function callback() {
      $element.first()
        .removeClass(focusClass)
        .removeAttr('tabindex');
    }
  },

  /**
   * If there's a hash in the url, focus the appropriate element
   */
  focusHash: function() {
    var hash = window.location.hash;

    // is there a hash in the url? is it an element on the page?
    if (hash && document.getElementById(hash.slice(1))) {
      this.pageLinkFocus($(hash));
    }
  },

  /**
   * When an in-page (url w/hash) link is clicked, focus the appropriate element
   */
  bindInPageLinks: function() {
    $('a[href*=#]').on('click', function(evt) {
      this.pageLinkFocus($(evt.currentTarget.hash));
    }.bind(this));
  },

  /**
   * Traps the focus in a particular container
   *
   * @param {object} options - Options to be used
   * @param {jQuery} options.$container - Container to trap focus within
   * @param {jQuery} options.$elementToFocus - Element to be focused when focus leaves container
   * @param {string} options.namespace - Namespace used for new focus event handler
   */
  trapFocus: function(options) {
    var eventName = options.namespace
      ? 'focusin.' + options.namespace
      : 'focusin';

    if (!options.$elementToFocus) {
      options.$elementToFocus = options.$container;
    }

    options.$container.attr('tabindex', '-1');
    options.$elementToFocus.focus();

    $(document).on(eventName, function(evt) {
      if (options.$container[0] !== evt.target && !options.$container.has(evt.target).length) {
        options.$container.focus();
      }
    });
  },

  /**
   * Removes the trap of focus in a particular container
   *
   * @param {object} options - Options to be used
   * @param {jQuery} options.$container - Container to trap focus within
   * @param {string} options.namespace - Namespace used for new focus event handler
   */
  removeTrapFocus: function(options) {
    var eventName = options.namespace
      ? 'focusin.' + options.namespace
      : 'focusin';

    if (options.$container && options.$container.length) {
      options.$container.removeAttr('tabindex');
    }

    $(document).off(eventName);
  }
};

/**
 * Cart Template Script
 * ------------------------------------------------------------------------------
 * A file that contains scripts highly couple code to the Cart template.
 *
 * @namespace cart
 */

slate.cart = {

  /**
   * Browser cookies are required to use the cart. This function checks if
   * cookies are enabled in the browser.
   */
  cookiesEnabled: function() {
    var cookieEnabled = navigator.cookieEnabled;

    if (!cookieEnabled){
      document.cookie = 'testcookie';
      cookieEnabled = (document.cookie.indexOf('testcookie') !== -1);
    }
    return cookieEnabled;
  }
};

/**
 * Utility helpers
 * -----------------------------------------------------------------------------
 * A collection of useful functions for dealing with arrays and objects
 *
 * @namespace utils
 */

slate.utils = {

  /**
   * Return an object from an array of objects that matches the provided key and value
   *
   * @param {array} array - Array of objects
   * @param {string} key - Key to match the value against
   * @param {string} value - Value to get match of
   */
  findInstance: function(array, key, value) {
    for (var i = 0; i < array.length; i++) {
      if (array[i][key] === value) {
        return array[i];
      }
    }
  },

  /**
   * Remove an object from an array of objects by matching the provided key and value
   *
   * @param {array} array - Array of objects
   * @param {string} key - Key to match the value against
   * @param {string} value - Value to get match of
   */
  removeInstance: function(array, key, value) {
    var i = array.length;
    while(i--) {
      if (array[i][key] === value) {
        array.splice(i, 1);
        break;
      }
    }

    return array;
  },

  /**
   * _.compact from lodash
   * Remove empty/false items from array
   * Source: https://github.com/lodash/lodash/blob/master/compact.js
   *
   * @param {array} array
   */
  compact: function(array) {
    var index = -1;
    var length = array == null ? 0 : array.length;
    var resIndex = 0;
    var result = [];

    while (++index < length) {
      var value = array[index];
      if (value) {
        result[resIndex++] = value;
      }
    }
    return result;
  },

  /**
   * _.defaultTo from lodash
   * Checks `value` to determine whether a default value should be returned in
   * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
   * or `undefined`.
   * Source: https://github.com/lodash/lodash/blob/master/defaultTo.js
   *
   * @param {*} value - Value to check
   * @param {*} defaultValue - Default value
   * @returns {*} - Returns the resolved value
   */
  defaultTo: function(value, defaultValue) {
    return (value == null || value !== value) ? defaultValue : value
  }
};

/**
 * Rich Text Editor
 * -----------------------------------------------------------------------------
 * Wrap iframes and tables in div tags to force responsive/scrollable layout.
 *
 * @namespace rte
 */

slate.rte = {
  /**
   * Wrap tables in a container div to make them scrollable when needed
   *
   * @param {object} options - Options to be used
   * @param {jquery} options.$tables - jquery object(s) of the table(s) to wrap
   * @param {string} options.tableWrapperClass - table wrapper class name
   */
  wrapTable: function(options) {
    var tableWrapperClass = typeof options.tableWrapperClass === "undefined" ? '' : options.tableWrapperClass;

    options.$tables.wrap('<div class="' + tableWrapperClass + '"></div>');
  },

  /**
   * Wrap iframes in a container div to make them responsive
   *
   * @param {object} options - Options to be used
   * @param {jquery} options.$iframes - jquery object(s) of the iframe(s) to wrap
   * @param {string} options.iframeWrapperClass - class name used on the wrapping div
   */
  wrapIframe: function(options) {
    var iframeWrapperClass = typeof options.iframeWrapperClass === "undefined" ? '' : options.iframeWrapperClass;

    options.$iframes.each(function() {
      // Add wrapper to make video responsive
      $(this).wrap('<div class="' + iframeWrapperClass + '"></div>');

      // Re-set the src attribute on each iframe after page load
      // for Chrome's "incorrect iFrame content on 'back'" bug.
      // https://code.google.com/p/chromium/issues/detail?id=395791
      // Need to specifically target video and admin bar
      this.src = this.src;
    });
  }
};

slate.Sections = function Sections() {
  this.constructors = {};
  this.instances = [];

  $(document)
    .on('shopify:section:load', this._onSectionLoad.bind(this))
    .on('shopify:section:unload', this._onSectionUnload.bind(this))
    .on('shopify:section:select', this._onSelect.bind(this))
    .on('shopify:section:deselect', this._onDeselect.bind(this))
    .on('shopify:section:reorder', this._onReorder.bind(this))
    .on('shopify:block:select', this._onBlockSelect.bind(this))
    .on('shopify:block:deselect', this._onBlockDeselect.bind(this));
};

slate.Sections.prototype = $.extend({}, slate.Sections.prototype, {
  _createInstance: function(container, constructor) {
    var $container = $(container);
    var id = $container.attr('data-section-id');
    var type = $container.attr('data-section-type');

    constructor = constructor || this.constructors[type];

    if (typeof constructor === 'undefined') {
      return;
    }

    var instance = $.extend(new constructor(container), {
      id: id,
      type: type,
      container: container
    });

    this.instances.push(instance);
  },

  _onSectionLoad: function(evt) {
    var container = $('[data-section-id]', evt.target)[0];
    if (container) {
      this._createInstance(container);
    }
  },

  _onSectionUnload: function(evt) {
    var instance = slate.utils.findInstance(this.instances, 'id', evt.detail.sectionId);

    if (!instance) {
      return;
    }

    if (typeof instance.onUnload === 'function') {
      instance.onUnload(evt);
    }

    this.instances = slate.utils.removeInstance(this.instances, 'id', evt.detail.sectionId);
  },

  _onSelect: function(evt) {
    var instance = slate.utils.findInstance(this.instances, 'id', evt.detail.sectionId);

    if (instance && typeof instance.onSelect === 'function') {
      instance.onSelect(evt);
    }
  },

  _onDeselect: function(evt) {
    var instance = slate.utils.findInstance(this.instances, 'id', evt.detail.sectionId);

    if (instance && typeof instance.onDeselect === 'function') {
      instance.onDeselect(evt);
    }
  },

  _onReorder: function(evt) {
    var instance = slate.utils.findInstance(this.instances, 'id', evt.detail.sectionId);

    if (instance && typeof instance.onReorder === 'function') {
      instance.onReorder(evt);
    }
  },

  _onBlockSelect: function(evt) {
    var instance = slate.utils.findInstance(this.instances, 'id', evt.detail.sectionId);

    if (instance && typeof instance.onBlockSelect === 'function') {
      instance.onBlockSelect(evt);
    }
  },

  _onBlockDeselect: function(evt) {
    var instance = slate.utils.findInstance(this.instances, 'id', evt.detail.sectionId);

    if (instance && typeof instance.onBlockDeselect === 'function') {
      instance.onBlockDeselect(evt);
    }
  },

  register: function(type, constructor) {
    this.constructors[type] = constructor;

    $('[data-section-type=' + type + ']').each(function(index, container) {
      this._createInstance(container, constructor);
    }.bind(this));
  }
});

/**
 * Currency Helpers
 * -----------------------------------------------------------------------------
 * A collection of useful functions that help with currency formatting
 *
 * Current contents
 * - formatMoney - Takes an amount in cents and returns it as a formatted dollar value.
 *
 */

slate.Currency = (function () {
  var moneyFormat = '${{amount}}';

  /**
   * Format money values based on your shop currency settings
   * @param  {Number|string} cents - value in cents or dollar amount e.g. 300 cents
   * or 3.00 dollars
   * @param  {String} format - shop money_format setting
   * @return {String} value - formatted value
   */
  function formatMoney(cents, format) {
    if (typeof cents === 'string') {
      cents = cents.replace('.', '');
    }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = (format || moneyFormat);

    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = slate.utils.defaultTo(precision, 2);
      thousands = slate.utils.defaultTo(thousands, ',');
      decimal = slate.utils.defaultTo(decimal, '.');

      if (isNaN(number) || number == null) {
        return 0;
      }

      number = (number / 100.0).toFixed(precision);

      var parts = number.split('.');
      var dollarsAmount = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands);
      var centsAmount = parts[1] ? (decimal + parts[1]) : '';

      return dollarsAmount + centsAmount;
    }

    switch (formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }

    return formatString.replace(placeholderRegex, value);
  }

  return {
    formatMoney: formatMoney
  };
})();

/**
 * Image Helper Functions
 * -----------------------------------------------------------------------------
 * A collection of functions that help with basic image operations.
 *
 */

slate.Image = (function() {

  /**
   * Preloads an image in memory and uses the browsers cache to store it until needed.
   *
   * @param {Array} images - A list of image urls
   * @param {String} size - A shopify image size attribute
   */

  function preload(images, size) {
    if (typeof images === 'string') {
      images = [images];
    }

    for (var i = 0; i < images.length; i++) {
      var image = images[i];
      this.loadImage(this.getSizedImageUrl(image, size));
    }
  }

  /**
   * Loads and caches an image in the browsers cache.
   * @param {string} path - An image url
   */
  function loadImage(path) {
    new Image().src = path;
  }

  /**
   * Find the Shopify image attribute size
   *
   * @param {string} src
   * @returns {null}
   */
  function imageSize(src) {
    var match = src.match(/.+_((?:pico|icon|thumb|small|compact|medium|large|grande)|\d{1,4}x\d{0,4}|x\d{1,4})[_\.@]/);

    if (match) {
      return match[1];
    } else {
      return null;
    }
  }

  /**
   * Adds a Shopify size attribute to a URL
   *
   * @param src
   * @param size
   * @returns {*}
   */
  function getSizedImageUrl(src, size) {
    if (size === null) {
      return src;
    }

    if (size === 'master') {
      return this.removeProtocol(src);
    }

    var match = src.match(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?$/i);

    if (match) {
      var prefix = src.split(match[0]);
      var suffix = match[0];

      return this.removeProtocol(prefix[0] + '_' + size + suffix);
    } else {
      return null;
    }
  }

  function removeProtocol(path) {
    return path.replace(/http(s)?:/, '');
  }

  return {
    preload: preload,
    loadImage: loadImage,
    imageSize: imageSize,
    getSizedImageUrl: getSizedImageUrl,
    removeProtocol: removeProtocol
  };
})();

/**
 * Variant Selection scripts
 * ------------------------------------------------------------------------------
 *
 * Handles change events from the variant inputs in any `cart/add` forms that may
 * exist. Also updates the master select and triggers updates when the variants
 * price or image changes.
 *
 * @namespace variants
 */

slate.Variants = (function() {

  /**
   * Variant constructor
   *
   * @param {object} options - Settings from `product.js`
   */
  function Variants(options) {
    this.$container = options.$container;
    this.product = options.product;
    this.singleOptionSelector = options.singleOptionSelector;
    this.originalSelectorId = options.originalSelectorId;
    this.enableHistoryState = options.enableHistoryState;
    this.currentVariant = this._getVariantFromOptions();

    $(this.singleOptionSelector, this.$container).on('change', this._onSelectChange.bind(this));
  }

  Variants.prototype = $.extend({}, Variants.prototype, {

    /**
     * Get the currently selected options from add-to-cart form. Works with all
     * form input elements.
     *
     * @return {array} options - Values of currently selected variants
     */
    _getCurrentOptions: function() {
      var currentOptions = $.map($(this.singleOptionSelector, this.$container), function(element) {
        var $element = $(element);
        var type = $element.attr('type');
        var currentOption = {};

        if (type === 'radio' || type === 'checkbox') {
          if ($element[0].checked) {
            currentOption.value = $element.val();
            currentOption.index = $element.data('index');

            return currentOption;
          } else {
            return false;
          }
        } else {
          currentOption.value = $element.val();
          currentOption.index = $element.data('index');

          return currentOption;
        }
      });

      // remove any unchecked input values if using radio buttons or checkboxes
      currentOptions = slate.utils.compact(currentOptions);

      return currentOptions;
    },

    /**
     * Find variant based on selected values.
     *
     * @param  {array} selectedValues - Values of variant inputs
     * @return {object || undefined} found - Variant object from product.variants
     */
    _getVariantFromOptions: function() {
      var selectedValues = this._getCurrentOptions();
      var variants = this.product.variants;
      var found = false;

      variants.forEach(function(variant) {
        var satisfied = true;

        selectedValues.forEach(function(option) {
          if (satisfied) {
            satisfied = (option.value === variant[option.index]);
          }
        });

        if (satisfied) {
          found = variant;
        }
      });

      return found || null;
    },

    /**
     * Event handler for when a variant input changes.
     */
    _onSelectChange: function() {
      var variant = this._getVariantFromOptions();

      this.$container.trigger({
        type: 'variantChange',
        variant: variant
      });

      if (!variant) {
        return;
      }

      this._updateMasterSelect(variant);
      this._updateImages(variant);
      this._updatePrice(variant);
      this.currentVariant = variant;

      if (this.enableHistoryState) {
        this._updateHistoryState(variant);
      }
    },

    /**
     * Trigger event when variant image changes
     *
     * @param  {object} variant - Currently selected variant
     * @return {event}  variantImageChange
     */
    _updateImages: function(variant) {
      var variantImage = variant.featured_image || {};
      var currentVariantImage = this.currentVariant.featured_image || {};

      if (!variant.featured_image || variantImage.src === currentVariantImage.src) {
        return;
      }

      this.$container.trigger({
        type: 'variantImageChange',
        variant: variant
      });
    },

    /**
     * Trigger event when variant price changes.
     *
     * @param  {object} variant - Currently selected variant
     * @return {event} variantPriceChange
     */
    _updatePrice: function(variant) {
      if (variant.price === this.currentVariant.price && variant.compare_at_price === this.currentVariant.compare_at_price) {
        return;
      }

      this.$container.trigger({
        type: 'variantPriceChange',
        variant: variant
      });
    },

    /**
     * Update history state for product deeplinking
     *
     * @param {object} variant - Currently selected variant
     */
    _updateHistoryState: function(variant) {
      if (!history.replaceState || !variant) {
        return;
      }

      var newurl = window.location.protocol + '//' + window.location.host + window.location.pathname + '?variant=' + variant.id;
      window.history.replaceState({path: newurl}, '', newurl);
    },

    /**
     * Update hidden master select of variant change
     *
     * @param {object} variant - Currently selected variant
     */
    _updateMasterSelect: function(variant) {
      $(this.originalSelectorId, this.$container)[0].value = variant.id;
    }
  });

  return Variants;
})();


/*================ Sections ================*/
/**
 * Product Template Script
 * ------------------------------------------------------------------------------
 * A file that contains scripts highly couple code to the Product template.
 *
   * @namespace product
 */

theme.Product = (function() {

  var selectors = {
    addToCart: '[data-add-to-cart]',
    addToCartText: '[data-add-to-cart-text]',
    comparePrice: '[data-compare-price]',
    comparePriceText: '[data-compare-text]',
    originalSelectorId: '[data-product-select]',
    priceWrapper: '[data-price-wrapper]',
    productFeaturedImage: '[data-product-featured-image]',
    productImageWrapper: '[data-product-image-wrapper]',
    productThumbs: '[data-product-single-thumbnail]',
    productSlides: '[data-product-slide]',
    productDescription: '[data-product-description]',
    productJson: '[data-product-json]',
    productPrice: '[data-product-price]',
    productThumbs: '[data-product-single-thumbnail]',
    singleOptionSelector: '[data-single-option-selector]',
    buyBar: '[data-buy-bar]'
  };

  /**
   * Product section constructor. Runs on page load as well as Theme Editor
   * `section:load` events.
   * @param {string} container - selector for the section container DOM element
   */
  function Product(container) {
    this.$container = $(container);

    // Stop parsing if we don't have the product json script tag when loading
    // section in the Theme Editor
    if (!$(selectors.productJson, this.$container).html()) {
      return;
    }

    var sectionId = this.$container.attr('data-section-id');
    this.productSingleObject = JSON.parse($(selectors.productJson, this.$container).html());

    var options = {
      $container: this.$container,
      enableHistoryState: this.$container.data('enable-history-state') || false,
      singleOptionSelector: selectors.singleOptionSelector,
      originalSelectorId: selectors.originalSelectorId,
      product: this.productSingleObject
    };

    this.settings = {};
    this.namespace = '.product';
    this.variants = new slate.Variants(options);
    this.$featuredImage = $(selectors.productFeaturedImage, this.$container);

    this.$container.on('variantChange' + this.namespace, this.updateAddToCartState.bind(this));
    this.$container.on('variantPriceChange' + this.namespace, this.updateProductPrices.bind(this));

    if (this.$featuredImage.length > 0) {
      this.settings.imageSize = slate.Image.imageSize(this.$featuredImage.attr('src'));
      slate.Image.preload(this.productSingleObject.images, this.settings.imageSize);

      this.$container.on('variantImageChange' + this.namespace, this.updateProductImage.bind(this));
    }

    this.initBuyBar();
    this.thumbnailHandler();

  }

  Product.prototype = $.extend({}, Product.prototype, {

    /**
     * Updates the DOM state of the add to cart button
     *
     * @param {boolean} enabled - Decides whether cart is enabled or disabled
     * @param {string} text - Updates the text notification content of the cart
     */
    updateAddToCartState: function(evt) {
      var variant = evt.variant;

      if (variant) {
        $(selectors.priceWrapper, this.$container).removeClass('hide');
      } else {
        $(selectors.addToCart, this.$container).prop('disabled', true);
        $(selectors.addToCartText, this.$container).html(theme.strings.unavailable);
        $(selectors.priceWrapper, this.$container).addClass('hide');
        return;
      }

      if (variant.available) {
        $(selectors.addToCart, this.$container).prop('disabled', false);
        $(selectors.addToCartText, this.$container).html(theme.strings.addToCart);
      } else {
        $(selectors.addToCart, this.$container).prop('disabled', true);
        $(selectors.addToCartText, this.$container).html(theme.strings.soldOut);
      }
    },

    /**
     * Updates the DOM with specified prices
     *
     * @param {string} productPrice - The current price of the product
     * @param {string} comparePrice - The original price of the product
     */
    updateProductPrices: function(evt) {
      var variant = evt.variant;
      var $comparePrice = $(selectors.comparePrice, this.$container);
      var $compareEls = $comparePrice.add(selectors.comparePriceText, this.$container);

      $(selectors.productPrice, this.$container)
        .html(slate.Currency.formatMoney(variant.price, theme.moneyFormat));

      if (variant.compare_at_price > variant.price) {
        $comparePrice.html(slate.Currency.formatMoney(variant.compare_at_price, theme.moneyFormat));
        $compareEls.removeClass('hide');
      } else {
        $comparePrice.html('');
        $compareEls.addClass('hide');
      }
    },

    /**
     * Updates the DOM with the specified image URL
     *
     * @param {string} src - Image src URL
     */
    updateProductImage: function(evt) {
      var variant = evt.variant;
      var sizedImgUrl = slate.Image.getSizedImageUrl(variant.featured_image.src, this.settings.imageSize);

      this.$featuredImage.attr('src', sizedImgUrl);
    },

    /**
     * Updates the DOM with the thumbnail-nav
     *
     * @param {string} src - Image src URL
     */
    thumbnailMenu: function(evt) {

      $(selectors.productThumbs).on('click',function(e){
        var imgUrl = $(this).attr('href');
        //$(selectors.productFeaturedImage).attr('src', imgUrl);
        e.preventDefault();
      });
    },

    /**
     * Updates the sliders images
     */
    updateSliderImage: function(evt) {
      var variant = evt.variant;
      var imgSrc = variant.featured_image.src;
      var imgFile = imgSrc.split('/products/');
      var fileName = imgFile[1].split('.jpg');

      $('img[src*="' + fileName[0] + '"]').trigger('click');

    },

    /**
     * Updates featured image with thumbnail images
     *
     * @param {string} src - Image src URL
     */
    thumbnailHandler: function() {
      $(selectors.productThumbs).on('click',function(e){
        e.preventDefault();
        var newImgUrl = e.target.parentNode.href;
        $(selectors.productFeaturedImage).attr('src', newImgUrl);
      })

    },

    /**
     * Call waypoint to trigger buy bar
     *
     * @param {string} src - Image src URL
     */
    initBuyBar: function() {

      if($(selectors.buyBar).length > 0) {
        var buttonId = $(selectors.addToCart, this.$container).attr('id');
        var waypoint = new Waypoint({
          element: document.getElementById(buttonId),
          handler: function(direction) {
            $(selectors.buyBar, this.$container).toggleClass('stuck');
          }
        })
      }
    },

    /**
     * Event callback for Theme Editor `section:unload` event
     */
    onUnload: function() {
      this.$container.off(this.namespace);
    }
  });

  return Product;
})();


/*================ Templates ================*/
/**
 * Customer Addresses Script
 * ------------------------------------------------------------------------------
 * A file that contains scripts highly couple code to the Customer Addresses
 * template.
 *
 * @namespace customerAddresses
 */

theme.customerAddresses = (function() {
  var $newAddressForm = $('#AddressNewForm');

  if (!$newAddressForm.length) {
    return;
  }

  // Initialize observers on address selectors, defined in shopify_common.js
  if (Shopify) {
    new Shopify.CountryProvinceSelector('AddressCountryNew', 'AddressProvinceNew', {
      hideElement: 'AddressProvinceContainerNew'
    });
  }

  // Initialize each edit form's country/province selector
  $('.address-country-option').each(function() {
    var formId = $(this).data('form-id');
    var countrySelector = 'AddressCountry_' + formId;
    var provinceSelector = 'AddressProvince_' + formId;
    var containerSelector = 'AddressProvinceContainer_' + formId;

    new Shopify.CountryProvinceSelector(countrySelector, provinceSelector, {
      hideElement: containerSelector
    });
  });

  // Toggle new/edit address forms
  $('.address-new-toggle').on('click', function() {
    $newAddressForm.toggleClass('hide');
  });

  $('.address-edit-toggle').on('click', function() {
    var formId = $(this).data('form-id');
    $('#EditAddress_' + formId).toggleClass('hide');
  });

  $('.address-delete').on('click', function() {
    var $el = $(this);
    var formId = $el.data('form-id');
    var confirmMessage = $el.data('confirm-message');
    if (confirm(confirmMessage || 'Are you sure you wish to delete this address?')) {
      Shopify.postLink('/account/addresses/' + formId, {parameters: {_method: 'delete'}});
    }
  });
})();

/**
 * Password Template Script
 * ------------------------------------------------------------------------------
 * A file that contains scripts highly couple code to the Password template.
 *
 * @namespace password
 */

theme.customerLogin = (function() {
  var config = {
    recoverPasswordForm: '#RecoverPassword',
    hideRecoverPasswordLink: '#HideRecoverPasswordLink'
  };

  if (!$(config.recoverPasswordForm).length) {
    return;
  }

  checkUrlHash();
  resetPasswordSuccess();

  $(config.recoverPasswordForm).on('click', onShowHidePasswordForm);
  $(config.hideRecoverPasswordLink).on('click', onShowHidePasswordForm);

  function onShowHidePasswordForm(evt) {
    evt.preventDefault();
    toggleRecoverPasswordForm();
  }

  function checkUrlHash() {
    var hash = window.location.hash;

    // Allow deep linking to recover password form
    if (hash === '#recover') {
      toggleRecoverPasswordForm();
    }
  }

  /**
   *  Show/Hide recover password form
   */
  function toggleRecoverPasswordForm() {
    $('#RecoverPasswordForm').toggleClass('hide');
    $('#CustomerLoginForm').toggleClass('hide');
  }

  /**
   *  Show reset password success message
   */
  function resetPasswordSuccess() {
    var $formState = $('.reset-password-success');

    // check if reset password form was successfully submited.
    if (!$formState.length) {
      return;
    }

    // show success message
    $('#ResetSuccess').removeClass('hide');
  }
})();


/*================ Utils ================*/

/**
 * Module to ajaxify all add to cart forms on the page.
 *
 * Copyright (c) 2015 Caroline Schnapp (11heavens.com)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */
Shopify.AjaxifyCart = (function($) {

  // Some configuration options.
  // I have separated what you will never need to change from what
  // you might change.

  var _config = {

    // What you might want to change
    addToCartBtnLabel:             'Add to cart',
    addedToCartBtnLabel:           'Thank you!',
    addingToCartBtnLabel:          'Adding...',
    soldOutBtnLabel:               'Sold Out',
    howLongTillBtnReturnsToNormal: 1000, // in milliseconds.
    cartCountSelector:             '.js-cart-count',
    cartTotalSelector:             '.drawer-cart__checkout',
    drawerCartItemsContainer:      '.drawer-cart__items',
    // 'aboveForm' for top of add to cart form,
    // 'belowForm' for below the add to cart form, and
    // 'nextButton' for next to add to cart button.
    feedbackPosition:              'nextButton',

    // What you will never need to change
    addToCartBtnSelector:          '[type="submit"]',
    addToCartFormSelector:         'form[action="/cart/add"]',
    shopifyAjaxAddURL:             '/cart/add.js',
    shopifyAjaxCartURL:            '/cart.js'
  };

  // We need some feedback when adding an item to the cart.
  // Here it is.
  var _showFeedback = function(success, html, $addToCartForm) {
    $('.ajaxified-cart-feedback').remove();
    var feedback = '<p class="ajaxified-cart-feedback ' + success + '">' + html + '</p>';
    switch (_config.feedbackPosition) {
      case 'aboveForm':
        $addToCartForm.before(feedback);
        break;
      case 'belowForm':
        $addToCartForm.after(feedback);
        break;
      case 'nextButton':
      default:
        $addToCartForm.find(_config.addToCartBtnSelector).after(feedback);
        break;
    }
    // If you use animate.css
    // $('.ajaxified-cart-feedback').addClass('animated bounceInDown');
    $('.ajaxified-cart-feedback').slideDown();
  };
  var _setText = function($button, label) {
    if ($button.children().length) {
      $button.children().each(function() {
        if ($.trim($(this).text()) !== '') {
          $(this).text(label);
        }
      });
    }
    else {
      $button.val(label).text(label);
    }
  };
  var _updateCartDrawer = function() {
    $.ajax({
      url: _config.shopifyAjaxCartURL,
      dataType: 'json',
      type: 'get',
      success: function(data) {
        
        
        var dataUpdated = checkFreeItemValid(data);
        var dataUpdated1 = checkIsFreeGiftEligible(data);
        var dataUpdated2 = checkIsFreeGiftAmountEligible(data);
        
        
        if(dataUpdated || dataUpdated1 || dataUpdated2)
        {
        	_updateCartDrawer();
          	return;
        }
        
        $(_config.drawerCartItemsContainer).html('');
        $.each(data.items, function(i, item){
          var line = i + 1;
          
          var properties_str="";
          var offer_product=false;
          $.each(item.properties, function(key, value) {
            if(key=="Offer")
			{
              properties_str='<p><b>'+key+':</b>'+value+'</p>';
              offer_product=true;
            }
            else if(key=="Gift-Offer")
			{
              if(freeAmountGiftsEnable){
                properties_str='<p><b>'+key+':</b>'+value+'</p>';
              	offer_product=true;
              }
              
            }
          });
          if(offer_product)
          {
            var price_str = "";
            if( item.original_line_price != item.line_price)
            {
            	price_str = ""+Shopify.formatMoney(item.line_price)+"<s>"+Shopify.formatMoney(item.original_line_price)+"</s>"  ;
            }
            else
            {
            	price_str = ""+Shopify.formatMoney(item.price) ;
            }
            
            $(_config.drawerCartItemsContainer).append('<div class="row middle-xs drawer-cart__item" id="item-' + (i+1) + '">'
            + '<div class="col-xs-4"><a href="' + item.url + '"><img src="' + item.image + '" alt="' + item.product_title + '"/></a></div>'
            + '<div class="col-xs-8">'
            + '<a class="drawer-cart__title" href="' + item.url + '">' + item.product_title + '</a>'
            + properties_str
            + '<p class="drawer-cart__price">' 
            + price_str
            + '</p>'
            + '<div class="row middle-xs">'
            + '<div class="col-xs-8"><label for="updates_' + item.key + '" class="visually-hidden">Quantity</label>'
            
            + '   <input type="hidden"'
            + '        name="updates[]"'
            + '        id="updates_' + item.key + '"'
            + '        value="' + item.quantity + '"'
            + '        data-updates="' + (i+1) + '"'
            + '        >'
            + '</div>'
            + '<div class="col-xs-4 text-align--right"></div>'
            + '</div>'
            + '</div>'
            + '</div>');
       
          
          }
          else
          {
            
            $(_config.drawerCartItemsContainer).append('<div class="row middle-xs drawer-cart__item" id="item-' + (i+1) + '">'
            + '<div class="col-xs-4"><a href="' + item.url + '"><img src="' + item.image + '" alt="' + item.product_title + '"/></a></div>'
            + '<div class="col-xs-8">'
            + '<a class="drawer-cart__title" href="' + item.url + '">' + item.product_title + '</a>'
            + '<p class="drawer-cart__price">' + Shopify.formatMoney(item.price) + '</p>'
            + '<div class="row middle-xs">'
            + '<div class="col-xs-8"><label for="updates_' + item.key + '" class="visually-hidden">Quantity</label>'
            + '<div class="quantity-selector">'
            + '   <span class="quantity__button js-quantity-button" data-action="decrease-quantity">-</span>'
            + '   <input type="text"'
            + '        class="quantity__input"'
            + '        name="updates[]"'
            + '        id="updates_' + item.key + '"'
            + '        value="' + item.quantity + '"'
            + '        data-updates="' + (i+1) + '"'
            + '        min="0"'
            + '        aria-label="Quantity">'
            + ' <span class="quantity__button js-quantity-button" data-action="increase-quantity">+</span>'
            + ' </div>'
            + '</div>'
            + '<div class="col-xs-4 text-align--right"><a class="remove js-remove-item" data-item-id="' + item.variant_id + '" data-item-index="' + (i+1) + '" href="/cart/change?line=' + (i+1) + '&amp;quantity=0">Remove</a></div>'
            + '</div>'
            + '</div>'
            + '</div>');
        
          
          }
          });
          $(_config.cartTotalSelector).val('Check out ' + Shopify.formatMoney(data.total_price));
          $(_config.cartCountSelector).html(data.item_count);
        $('body').toggleClass('js-drawer-open-right');

        {% if settings.progress_bar_enabled %}
          $('#cart-total').val(data.total_price);
          theme.initProgressBar();
          theme.animateProgressBar();
        {% endif %}
      }
    });
  };
  var _init = function() {
      $(_config.addToCartFormSelector).submit(function(e) {
        e.preventDefault();
        var $addToCartForm = $(this);
        var $addToCartBtn = $addToCartForm.find(_config.addToCartBtnSelector);
        _setText($addToCartBtn, 'Check out ' + _config.addingToCartBtnLabel);
        $addToCartBtn.addClass('disabled').prop('disabled', true);
        
        if($addToCartForm.hasClass('has-free-product'))
        {
          $(".free-product-form [name='quantity']").val(1);
        
        }
        
        
        
        // Add to cart.
        $.ajax({
          url: _config.shopifyAjaxAddURL,
          dataType: 'json',
          type: 'post',
          data: $addToCartForm.serialize(),
          success: function(itemData) {

            if($addToCartForm.hasClass('free-product-form'))
        	{
          		return;
        
        	}
            if($addToCartForm.hasClass('has-free-product'))
        	{
          		$(".free-product-form").submit();
        	}
            var motivator_ajax = function(itemData){
              
                if (typeof trigger_messages === 'function'){
                  trigger_messages();
                }
              
                // Re-enable add to cart button.
                $addToCartBtn.addClass('inverted');
                _setText($addToCartBtn, _config.addedToCartBtnLabel);
                //_showFeedback('success','<i class="fa fa-check"></i> Added to cart! <a href="/cart">View cart</a> or <a href="/collections/all">continue shopping</a>.',$addToCartForm);
                _updateCartDrawer();
                window.setTimeout(function(){
                  $addToCartBtn.prop('disabled', false).removeClass('disabled').removeClass('inverted');
                  _setText($addToCartBtn,_config.addToCartBtnLabel);
                }, _config.howLongTillBtnReturnsToNormal);
                // Update cart count and show cart link.
                $.getJSON(_config.shopifyAjaxCartURL, function(cart) {
                  if (_config.cartCountSelector && $(_config.cartCountSelector).length) {
                    var value = $(_config.cartCountSelector).html() || '0';
                    $(_config.cartCountSelector).html(value.replace(/[0-9]+/,cart.item_count)).removeClass('hidden-count');
                  }
                  if (_config.cartTotalSelector && $(_config.cartTotalSelector).length) {
                    if (typeof Currency !== 'undefined' && typeof Currency.moneyFormats !== 'undefined') {
                      var newCurrency = '';
                      if ($('[name="currencies"]').length) {
                        newCurrency = $('[name="currencies"]').val();
                      }
                      else if ($('#currencies span.selected').length) {
                        newCurrency = $('#currencies span.selected').attr('data-currency');
                      }
                      if (newCurrency) {
                        $(_config.cartTotalSelector).val('Check out ' + Shopify.formatMoney(cart.total_price));
                      }
                      else {
                        $(_config.cartTotalSelector).val('Check out ' + Shopify.formatMoney(cart.total_price));
                      }
                    }
                    else {
                      $(_config.cartTotalSelector).val('Check out ' + Shopify.formatMoney(cart.total_price));
                    }
                  };
                });
              //_updateCartDrawer()
            }
           
            if(typeof updateMotivator == 'function') {
              $.getJSON('/cart.js', function(item, c) {
              updateMotivator(c, motivator_ajax.bind(this, item));
              }.bind(this, itemData))
            }     
            else {
              motivator_ajax(itemData); 
            }
          
          },
          error: function(XMLHttpRequest) {
            var response = eval('(' + XMLHttpRequest.responseText + ')');
            response = response.description;
            if (response.slice(0,4) === 'All ') {
              _showFeedback('error', response.replace('All 1 ', 'All '), $addToCartForm);
              $addToCartBtn.prop('disabled', false);
              _setText($addToCartBtn, _config.soldOutBtnLabel);
              $addToCartBtn.prop('disabled',true);
            }
            else {
              _showFeedback('error', '<i class="fa fa-warning"></i> ' + response, $addToCartForm);
              $addToCartBtn.prop('disabled', false).removeClass('disabled');
              _setText($addToCartBtn, _config.addToCartBtnLabel);
            }
          }
        });
        return false;
      });
  };
  return {
    init: function(params) {
        // Configuration
        params = params || {};
        // Merging with defaults.
        $.extend(_config, params);
        // Action
        $(function() {
          _init();
        });
    },
    updateCartDrawer: function() {
        _updateCartDrawer();
    },
    getConfig: function() {
      return _config;
    }
  }
})(jQuery);

Shopify.QuickBuy = (function($) {

  var _config = {
    button:                        '.js-quick-buy',
    quantityButtons:               '.js-quantity-button',
    removeButton:                  '.js-remove-item',
    cartCountSelector:             '.js-cart-count',
    cartTotalSelector:             '.drawer-cart__checkout',
    drawerCartItemsContainer:      '.drawer-cart__items',
    shopifyAjaxAddURL:             '/cart/add.js',
    shopifyAjaxCartURL:            '/cart.js',
    shopifyUpdateURL:              '/cart/update.js',
    shopifyChangeURL:              '/cart/change.js',
    container:                     '.drawer-cart'
  }
  var _updateCartDrawer = function() {
    $.ajax({
      url: _config.shopifyAjaxCartURL,
      dataType: 'json',
      type: 'get',
      success: function(data) {
        
        var dataUpdated = checkFreeItemValid(data);
        var dataUpdated1 = checkIsFreeGiftEligible(data);
        var dataUpdated2 = checkIsFreeGiftAmountEligible(data);
        
        if(dataUpdated || dataUpdated1 || dataUpdated2)
        {
        	_updateCartDrawer();
          	return;
        }
        
        var motivator_ajax = function(data){
              $(_config.drawerCartItemsContainer).fadeOut('fast', function() {
              $(_config.drawerCartItemsContainer).html('');
              $.each(data.items, function(i, item){
                 
                
          		var properties_str="";
          		var offer_product=false;
         		 $.each(item.properties, function(key, value) {
        		    if(key=="Offer")
					{
        		      properties_str='<p><b>'+key+':</b>'+value+'</p>';
        		      offer_product=true;
        		    }
                   else if(key=="Gift-Offer")
					{
              			if(freeAmountGiftsEnable){
               			 properties_str='<p><b>'+key+':</b>'+value+'</p>';
              				offer_product=true;
              			}
              
            		}
       		    });
       		    if(offer_product)
       		    {
                  	var price_str = "";
            		if( item.original_line_price != item.line_price)
            		{
            			price_str = ""+Shopify.formatMoney(item.line_price)+"<s>"+Shopify.formatMoney(item.original_line_price)+"</s>"  ;
            		}
            		else
            		{
            			price_str = ""+Shopify.formatMoney(item.price) ;
            		}
                  $(_config.drawerCartItemsContainer).append('<div class="row middle-xs drawer-cart__item" id="item-' + (i+1) + '">'
                  + '<div class="col-xs-4"><a href="' + item.url + '"><img src="' + item.image + '" alt="' + item.product_title + '"/></a></div>'
                  + '<div class="col-xs-8">'
                  + '<a class="drawer-cart__title" href="' + item.url + '">' + item.product_title + '</a>'
                  + properties_str
                  + '<p class="drawer-cart__price">' + price_str + '</p>'
                  + '<div class="row middle-xs">'
                  + '<div class="col-xs-8"><label for="updates_' + item.key + '" class="visually-hidden">Quantity</label>'
                  + '   <input type="hidden"'
                  + '        name="updates[]"'
                  + '        id="updates_' + item.key + '"'
                  + '        value="' + item.quantity + '"'
                  + '        data-updates="' + (i+1) + '"'
                  + '        >'
                  + '</div>'
                  + '<div class="col-xs-4 text-align--right"></div>'
                  + '</div>'
                  + '</div>'
                  + '</div>');
      		    }
                else
                {
                 $(_config.drawerCartItemsContainer).append('<div class="row middle-xs drawer-cart__item" id="item-' + (i+1) + '">'
                  + '<div class="col-xs-4"><a href="' + item.url + '"><img src="' + item.image + '" alt="' + item.product_title + '"/></a></div>'
                  + '<div class="col-xs-8">'
                  + '<a class="drawer-cart__title" href="' + item.url + '">' + item.product_title + '</a>'
                  + '<p class="drawer-cart__price">' + Shopify.formatMoney(item.price) + '</p>'
                  + '<div class="row middle-xs">'
                  + '<div class="col-xs-8"><label for="updates_' + item.key + '" class="visually-hidden">Quantity</label>'
                  + '<div class="quantity-selector">'
                  + '   <span class="quantity__button js-quantity-button" data-action="decrease-quantity">-</span>'
                  + '   <input type="text"'
                  + '        class="quantity__input"'
                  + '        name="updates[]"'
                  + '        id="updates_' + item.key + '"'
                  + '        value="' + item.quantity + '"'
                  + '        data-updates="' + (i+1) + '"'
                  + '        min="0"'
                  + '        aria-label="Quantity">'
                  + ' <span class="quantity__button js-quantity-button" data-action="increase-quantity">+</span>'
                  + ' </div>'
                  + '</div>'
                  + '<div class="col-xs-4 text-align--right"><a class="remove js-remove-item" data-item-id="' + item.variant_id + '" data-item-index="' + (i+1) + '" href="/cart/change?line=' + (i+1) + '&amp;quantity=0">Remove</a></div>'
                  + '</div>'
                  + '</div>'
                  + '</div>');
                }
               
              });
            });
            $(_config.drawerCartItemsContainer).fadeIn('fast');
            if(!$('body').hasClass('js-drawer-open-right')){
              $('body').toggleClass('js-drawer-open-right');
            }
            $(_config.cartTotalSelector).val('Check out ' + Shopify.formatMoney(data.total_price));
            $(_config.cartCountSelector).html(data.item_count);

            {% if settings.progress_bar_enabled %}
              $('#cart-total').val(data.total_price);
              theme.initProgressBar();
              theme.animateProgressBar();
            {% endif %}
        }
        
        if(typeof updateMotivator == 'function') {
          updateMotivator(data, motivator_ajax);
        }     
        else {
          motivator_ajax(data); 
        }

        
      }
    });
  };
  var _init = function() {

    $(_config.button).on('click',function(e){
      e.preventDefault();
      var productQuantity = 1;
      var productId = this.dataset.productId;
      var newInventory = this.dataset.productQuantity - 1;
      $.ajax({
        url: _config.shopifyAjaxAddURL,
        dataType: 'json',
        type: 'post',
        data: {
          quantity: productQuantity,
          id: productId
        }
      })
      .done(function( html ) {
        _updateCartDrawer();
        if(newInventory === 0){
          $(this).remove();
        }
      });
    });

    $(_config.container).on('click',_config.removeButton,function(e){
      e.preventDefault();
      e.stopPropagation();
      var lineItemQuantity = 0,
          lineItemIndex = this.dataset.itemIndex;
      $.ajax({
        url: _config.shopifyChangeURL,
        dataType: 'json',
        type: 'post',
        data: {
          line: lineItemIndex,
          quantity: lineItemQuantity
        }
      })
      .done(function( html ) {
        _updateCartDrawer();
      });
    });

    $(_config.container).on('click',_config.quantityButtons,function(e){
      e.preventDefault();
      e.stopPropagation();
      var action = this.dataset.action,
          oldValue = $(this).parent().find('input').val(),
          newValue = null,
          lineItemIndex = $(this).parent().find('input').data('updates');

      if ($(this).text() == "+") {
    	  var newVal = parseFloat(oldValue) + 1;
    	} else {
       // Don't allow decrementing below zero
        if (oldValue > 0) {
          var newVal = parseFloat(oldValue) - 1;
        } else {
          newVal = 1;
        }
      }

      $(this).parent().find('input').val(newVal);

      $.ajax({
        url: _config.shopifyChangeURL,
        dataType: 'json',
        type: 'post',
        data: {
          line: lineItemIndex,
          quantity: newVal
        }
      })
      .done(function( data ) {
        
        var motivator_ajax = function(data){
          
          if (typeof trigger_messages === 'function'){
            trigger_messages();
          }
          
          $(_config.cartTotalSelector).val('Check out ' + Shopify.formatMoney(data.total_price));
          $(_config.cartCountSelector).html(data.item_count);

          {% if settings.progress_bar_enabled %}
          $('#cart-total').val(data.total_price);
          theme.initProgressBar();
          theme.animateProgressBar();
          {% endif %}
          _updateCartDrawer()
        }
        
        if(typeof updateMotivator == 'function') {
          updateMotivator(data, motivator_ajax);
        }     
        else {
          motivator_ajax(data); 
        }
       
      });
    });

  };
  return {
    init: function(params) {
        // Configuration
        params = params || {};
        // Merging with defaults.
        $.extend(_config, params);
        // Action
        $(function() {
          _init();
        });
    },
    getConfig: function() {
      return _config;
    }
  }
})(jQuery);

theme.calculatePercent = function(total, fraction){
  return (100 * fraction) / total;
}

// animate bar and text
theme.animateProgressBar = function(){
  var newWidth = document.querySelectorAll('[data-progress-bar]')[0].dataset.barStatus;
  $('[data-bar-status]').css('width',newWidth);

  $( "[data-progress-text]" ).fadeOut( 'fast', function() {
    $.each($('[data-show]'), function ( i, item ){
      if(item.dataset.show == 1 ){
        $(item).show();
      } else {
        $(item).hide();
      }
    });
  }).fadeIn('fast');
}

theme.setProgressBar = function(bar, percentage){
  if(percentage < 100){
    bar.setAttribute('data-bar-status', percentage + '%');
  } else {
    bar.setAttribute('data-bar-status','100%');
  }
}


theme.initProgressBar = function(){

  console.log('init progress bar');
  var progressBar = document.querySelectorAll('[data-progress-bar]'),
      progressMarkers = document.querySelectorAll('[data-progress-marker]'),
      progressSuccess = document.querySelectorAll('[data-progress-success]'),
      cartTotal = document.getElementById('cart-total').value,
      barWidth = 0;
  {% comment %}
  if(progressMarkers.length <= 1){
    barWidth = theme.calculatePercent(progressMarkers[0].dataset.goal, cartTotal);
  } else {
    barWidth = theme.calculatePercent(progressMarkers[1].dataset.goal, cartTotal);
  }
  {% endcomment %}
  barWidth = theme.calculatePercent(progressMarkers[progressMarkers.length- 1].dataset.goal, cartTotal);
  
  
  theme.setProgressBar(progressBar[0], barWidth);
	var completedmarker = null;
  	var pendingmarker = null;
  	var notefound = true;
  $.each(progressMarkers, function ( i, item ){
    var dollarDifference = (progressMarkers[i].dataset.goal - cartTotal) / 100;
    if( dollarDifference > 0 && notefound == true){
      	$(progressMarkers[i]).find('span').html(dollarDifference);
      	completedmarker = i-1;
      	pendingmarker = i;
      	notefound = false;
    }
    else if( i == (progressMarkers.length-1) && notefound == true)
    {
    	completedmarker = i;
    }
    else
    {
      	progressMarkers[i].setAttribute('data-show','0');
      	progressMarkers[i].nextElementSibling.setAttribute('data-show','0');
     
    }
  });
  
  if(completedmarker!=null && completedmarker>-1)
  {
  	progressMarkers[completedmarker].setAttribute('data-show','0');
      progressMarkers[completedmarker].nextElementSibling.setAttribute('data-show','1');
  }
  if(pendingmarker!=null && pendingmarker>-1)
  {
  	progressMarkers[pendingmarker].setAttribute('data-show','1');
      progressMarkers[pendingmarker].nextElementSibling.setAttribute('data-show','0');
  }
  
  {% comment %}
  $.each(progressMarkers, function ( i, item ){
    var dollarDifference = (progressMarkers[i].dataset.goal - cartTotal) / 100;
    if( dollarDifference > 0){
      $(progressMarkers[i]).find('span').html(dollarDifference);
      progressMarkers[i].setAttribute('data-show','1');
      progressMarkers[i].nextElementSibling.setAttribute('data-show','0');
    } else {
      progressMarkers[i].setAttribute('data-show','0');
      progressMarkers[i].nextElementSibling.setAttribute('data-show','1');
    }
  });
{% endcomment %}
}

theme.makeTabs = function(menu) {
  // Turn menu into
  var tabs = $(menu + ' li');

  tabs.each(function(i, val) {

    //Get all tabs
    var tab = $(this).find('a');
    tab.on('click',function(e) {

      //Get Location of tab's content
      var contentLocation = $(this).attr('href');

      //Let go if not a hashed one
      if(contentLocation.charAt(0)=="#") {
      e.preventDefault();

      //Make Tab Active
      $(menu + ' a').removeClass('active');
      $(this).addClass('active');

      //Show Tab Content & add active class
      $(contentLocation).show().addClass('active').siblings('.tab-content').hide().removeClass('active');

    }
    });

    if(i === 0){
    tab.click();
    }
  });

}

theme.makeAccordion = function( trigger ){
  $(trigger).each(function(){
    var content = this.nextElementSibling;
    $(this).addClass('is-accordion-title');
    $(content).addClass('is-accordion-content').hide();

    $(this).on('click',function(){
      $(content).slideToggle();
      $(this).toggleClass('open');
    });
  });
}



theme.drawer = function( trigger, direction ){
  $(trigger).on('click',function(e){
    $('body').toggleClass('js-drawer-open-'+direction);
    {% if settings.progress_bar_enabled %}
    theme.animateProgressBar();
    {% endif %}
    e.preventDefault();
  });
}

theme.searchToggle = function ( toggleButton ){
  $(toggleButton).on('click',function(e){
    e.preventDefault();
    $('.big-search__container').toggleClass('open');
    if($('.big-search__container').hasClass('open')){
      $('.big-search__text').focus();
    }
  })
}

theme.subNavToggle = function ( toggleButton ){
  $(toggleButton).on('click',function(e){
    e.preventDefault();
    var target = this.dataset.target;
    $('#'+target).slideToggle();
    $(this).toggleClass('open');
  })
}

theme.filterNavToggle = function ( toggleButton ){
  $(toggleButton).on('click touchstart',function(e){
    e.preventDefault();
    var groupId = $(this).data('title');
    $('.scroll-content').hide();
    $('div[data-content="' + groupId + '"]').show();
  });

  $(document).mouseup(function(e){
    var filterNavContent = $('.scroll-content');
    if(e.target != filterNavContent){
      $('.scroll-content').hide();
    }
  });

}

theme.quantityIncrement = function( selector ){
  $(selector+':not(.js-quantity-button)').on("click", function() {

    var $button = $(this);
    var oldValue = $button.parent().find("input").val();

    if ($button.text() == "+") {
  	  var newVal = parseFloat(oldValue) + 1;
  	} else {
     // Don't allow decrementing below zero
      if (oldValue > 0) {
        var newVal = parseFloat(oldValue) - 1;
      } else {
        newVal = 0;
      }
    }

    $button.parent().find("input").val(newVal);

  });
}

theme.customSelect = function(){
  var x, i, j, selElmnt, a, b, c;
  /*look for any elements with the class "custom-select":*/
  x = document.getElementsByClassName("custom-select");
  for (i = 0; i < x.length; i++) {
    selElmnt = x[i].getElementsByTagName("select")[0];
    /*for each element, create a new DIV that will act as the selected item:*/
    a = document.createElement("DIV");
    a.setAttribute("class", "select-selected");
    a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
    x[i].appendChild(a);
    /*for each element, create a new DIV that will contain the option list:*/
    b = document.createElement("DIV");
    b.setAttribute("class", "select-items select-hide");
    for (j = 1; j < selElmnt.length; j++) {
      /*for each option in the original select element,
      create a new DIV that will act as an option item:*/
      c = document.createElement("DIV");
      c.innerHTML = selElmnt.options[j].innerHTML;
      c.addEventListener("click", function(e) {
          /*when an item is clicked, update the original select box,
          and the selected item:*/
          var y, i, k, s, h;
          s = this.parentNode.parentNode.getElementsByTagName("select")[0];
          h = this.parentNode.previousSibling;
          for (i = 0; i < s.length; i++) {
            if (s.options[i].innerHTML == this.innerHTML) {
              s.selectedIndex = i;
              h.innerHTML = this.innerHTML;
              y = this.parentNode.getElementsByClassName("same-as-selected");
              for (k = 0; k < y.length; k++) {
                y[k].removeAttribute("class");
              }
              this.setAttribute("class", "same-as-selected");
              break;
            }
          }
          h.click();
      });
      b.appendChild(c);
    }
    x[i].appendChild(b);
    a.addEventListener("click", function(e) {
        /*when the select box is clicked, close any other select boxes,
        and open/close the current select box:*/
        e.stopPropagation();
        closeAllSelect(this);
        this.nextSibling.classList.toggle("select-hide");
        this.classList.toggle("select-arrow-active");
    });
  }
  function closeAllSelect(elmnt) {
    /*a function that will close all select boxes in the document,
    except the current select box:*/
    var x, y, i, arrNo = [];
    x = document.getElementsByClassName("select-items");
    y = document.getElementsByClassName("select-selected");
    for (i = 0; i < y.length; i++) {
      if (elmnt == y[i]) {
        arrNo.push(i)
      } else {
        y[i].classList.remove("select-arrow-active");
      }
    }
    for (i = 0; i < x.length; i++) {
      if (arrNo.indexOf(i)) {
        x[i].classList.add("select-hide");
      }
    }
  }
  /*if the user clicks anywhere outside the select box,
  then close all select boxes:*/
  document.addEventListener("click", closeAllSelect);
}


$(document).ready(function() {
  var sections = new slate.Sections();
  sections.register('product', theme.Product);

  // Common a11y fixes
  slate.a11y.pageLinkFocus($(window.location.hash));

  $('.in-page-link').on('click', function(evt) {
    slate.a11y.pageLinkFocus($(evt.currentTarget.hash));
  });

  // Target tables to make them scrollable
  var tableSelectors = '.rte table';

  slate.rte.wrapTable({
    $tables: $(tableSelectors),
    tableWrapperClass: 'rte__table-wrapper',
  });

  // Target iframes to make them responsive
  var iframeSelectors =
    '.rte iframe[src*="youtube.com/embed"],' +
    '.rte iframe[src*="player.vimeo"]';

  slate.rte.wrapIframe({
    $iframes: $(iframeSelectors),
    iframeWrapperClass: 'rte__video-wrapper'
  });

  // Apply a specific class to the html element for browser support of cookies.
  if (slate.cart.cookiesEnabled()) {
    document.documentElement.className = document.documentElement.className.replace('supports-no-cookies', 'supports-cookies');
  }


  if($('[data-izimodal-open]').length > 0){
    
    $('[data-izimodal-open]').each(function(){
      
    var eleid = $(this).attr("data-izimodal-open");
    var VID = $(eleid + ' .youtube-player' ).attr('id');
      $(eleid + ' .youtube-player' ).attr('id')
    $($(this).attr("data-izimodal-open")).iziModal({
      width: '700px',
      onOpened: function(){
        
        if ($(eleid + ' .youtube-player' ).length) {
        
		var iframe = "<iframe id='ifmvideo"+VID+"' width='560' height='315' src='https://www.youtube.com/embed/VID?showinfo=0&frameborder=0&modestbranding=1&enablejsapi=1&version=3&playerapiid=ytplayer&rel=0' allowfullscreen='' allow='autoplay;encryted-media'></iframe>";
		var video_frame = iframe.replace("VID", VID);
		$(eleid + ' .youtube-player' ).replaceWith(video_frame);
        setTimeout(function(){$('#ifmvideo'+VID)[0].contentWindow.postMessage('{"event":"command","func":"' + 'playVideo' + '","args":""}', '*');},2000);  
        }else{
        $('#ifmvideo'+VID)[0].contentWindow.postMessage('{"event":"command","func":"' + 'playVideo' + '","args":""}', '*');
        }
        
      },
      onClosing: function(){
        $('#ifmvideo'+VID)[0].contentWindow.postMessage('{"event":"command","func":"' + 'pauseVideo' + '","args":""}', '*');
      }
    });
    });
  }

  theme.drawer('.js-drawer-right','right');
  theme.drawer('.drawer-close--right','right');
  theme.drawer('.js-drawer-left','left');
  theme.drawer('.drawer-close--left','left');
  theme.searchToggle('.js-open-search');
  theme.searchToggle('.js-close-search');
  theme.subNavToggle('.js-subnav-toggle');
  theme.makeTabs('.make-tabs');
  theme.quantityIncrement('.quantity__button');
  theme.customSelect();
  theme.makeAccordion('.product__description h5');
  theme.makeAccordion('.function_block_section h5');
  theme.filterNavToggle('.filter-group h4');
  {% if settings.progress_bar_enabled %}
  theme.initProgressBar();
  {% endif %}

  Shopify.AjaxifyCart.init();
  Shopify.QuickBuy.init();

});
